"""
  Coded by Julheer
  on 31.07.2020.
  
  Specially for MongoDB tutorials.
"""

from pymongo import MongoClient

# Подключаемся к MongoDB.
cluster = MongoClient("вставьте-сюда-свою-ссылку")  # Инициализируем кластер, чтобы подключаться к MongoDB.
db = cluster["economy"]  # Инициализируем дата-базу.
collection = db["app"]  # Инициализируем коллекцию.

# Создаём переменную с ID пользователя.
ID = 1

# Функция магазина.
def shop():
  # Запрашиваем у пользователя, что он хочет купить.
	tm = int(input("[Магазин] Фасоль - 15 рублей (1), Рыба - 25 рублей (2): "))
  
  # Проверяем, что ввёл пользователь.
	if tm == 1:
    # Инициализируем переменную с поиском пользователя в базе-данных.
		connect = collection.find({"_id": ID, "name": "Admin"})
    
    # Создаём цикл для удобной работы.
		for x in connect:
      # Проверяем баланс пользователя.
			if x["balance"] < 15:
        # Выводим сообщение с ошибкой.
				print("[Недостаточно средств] Вы не можете это купить!")
        
        # Отправляем пользователя в меню.
				menu()
      
			else:
        # Отнимаем от баланса пользователя сумму.
				r = x["balance"] = x["balance"] - 15
        
        # Производим действие на сервере.
        collection.update_one({"_id": ID}, {"$set": {"balance": r}})
        
        # Отправляем сообщение пользователю.
				print("[Успех] Вы купили фасоль.")
				menu()

	elif tm == 2:
		# Инициализируем переменную с поиском пользователя в базе-данных.
		connect = collection.find({"_id": ID, "name": "Admin"})
    
    # Создаём цикл для удобной работы.
		for x in connect:
      # Проверяем баланс пользователя.
			if x["balance"] < 15:
        # Выводим сообщение с ошибкой.
				print("[Недостаточно средств] Вы не можете это купить!")
        
        # Отправляем пользователя в меню.
				menu()
      
			else:
        # Отнимаем от баланса пользователя сумму.
				r = x["balance"] = x["balance"] - 15
        
        # Производим действие на сервере.
        collection.update_one({"_id": ID}, {"$set": {"balance": r}})
        
        # Отправляем сообщение пользователю.
				print("[Успех] Вы купили фасоль.")
				menu()
  
  # Если пользователь ввёл что-то другое:
	else:
    # Отправляем пользователя в меню.
		menu()

# Функция работы.
def work():
  # Выводим сообщение пользователю о том, что он заработал 15 рублей.
	print("Вы заработали 15 рублей.")
  
  # Создаём переменную с информацией пользователя.
	connect = collection.find({"_id": ID, "name": "Admin"})
  
  # Цикл, чтобы было удобно.
	for x in connect:
    # Получаем текущий баланс и добавляем к нему 15 рублей.
		r = x["balance"] = x["balance"] + 15
    
    # Обновляем баланс пользователя.
		collection.update_one({"_id": ID}, {"$set": {"balance": r}})
  
  # Возвращаем пользователя в меню.
	menu()

# Функция получения баланса.
def balance():
  # Создаём переменную с информацией о пользователи.
	connect = collection.find({"_id": ID, "name": "Admin"})
  
  # Создаём цикл для просчёта.
	for x in connect:
    # Выводим баланс пользователя.
		print(x["balance"])
    
    # Отправляем пользователя в меню.
    menu()

# Функция с гланым меню.
def menu():
  # Спрашиваем у пользователя, что он хочет сделать.
	q = int(input("1 - магазин, 2 - работа, 3 - баланс: "))
  
  # !!! Раскоментируйте этот код когда первый раз запсукаете программу. Затем назад верните его в комметарии. !!!
	# collection.insert_one({"_id": ID, "name": "Admin", "balance": 0})
  
  # Проверка на то, что выберет пользователь.
	if q == 1:
    # Отправляем пользователя в магазин.
		shop()
  
  # Если пользователь выберет работу:
	elif q == 2:
    # Отправляем его в соответствующую функцию.
		work()
  # Если пользователь выберет баланс:
	elif q == 3:
    # Отправляем пользователя в функцию.
		balance()
  
  # В остальных случаях выводим ошибку.
  else:
    # Отправляем ошибку пользователю.
    print("[Ошибка] Я Вас не понимаю :(")
    
    # Прекращаем выполнение команды.
    return

# Запускаем программу.
menu()
